/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface NiftyupFactoryInterface extends ethers.utils.Interface {
  functions: {
    "create(address,uint256)": FunctionFragment;
    "implementations(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "create",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "implementations",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "implementations",
    data: BytesLike
  ): Result;

  events: {
    "CreatedImplementationContract(uint256,address)": EventFragment;
    "CreatedNFTContract(address,address,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "CreatedImplementationContract"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatedNFTContract"): EventFragment;
}

export type CreatedImplementationContractEvent = TypedEvent<
  [BigNumber, string] & { bits: BigNumber; implementation: string }
>;

export type CreatedNFTContractEvent = TypedEvent<
  [string, string, string] & { creator: string; owner: string; nft: string }
>;

export class NiftyupFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NiftyupFactoryInterface;

  functions: {
    create(
      _owner: string,
      _bits: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    implementations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  create(
    _owner: string,
    _bits: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  implementations(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    create(
      _owner: string,
      _bits: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    implementations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "CreatedImplementationContract(uint256,address)"(
      bits?: BigNumberish | null,
      implementation?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { bits: BigNumber; implementation: string }
    >;

    CreatedImplementationContract(
      bits?: BigNumberish | null,
      implementation?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { bits: BigNumber; implementation: string }
    >;

    "CreatedNFTContract(address,address,address)"(
      creator?: string | null,
      owner?: string | null,
      nft?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { creator: string; owner: string; nft: string }
    >;

    CreatedNFTContract(
      creator?: string | null,
      owner?: string | null,
      nft?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { creator: string; owner: string; nft: string }
    >;
  };

  estimateGas: {
    create(
      _owner: string,
      _bits: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    implementations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    create(
      _owner: string,
      _bits: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    implementations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
